From 05993e32dd06d4339036d452edb05cd628afdeb4 Mon Sep 17 00:00:00 2001
From: LIO <ofleuxin@gmail.com>
Date: Wed, 19 Mar 2025 10:12:40 +0300
Subject: [PATCH 1/2] Add client

---
 20250317/1/Pipfile.lock |   6 +-
 20250317/1/client.py    | 214 ++++++++++++++++++++++++++++++++++++++++
 20250317/1/prog.py      |  53 +++++-----
 3 files changed, 246 insertions(+), 27 deletions(-)
 create mode 100644 20250317/1/client.py

diff --git a/20250317/1/Pipfile.lock b/20250317/1/Pipfile.lock
index cdb2f5e..b934026 100644
--- a/20250317/1/Pipfile.lock
+++ b/20250317/1/Pipfile.lock
@@ -18,12 +18,12 @@
     "default": {
         "python-cowsay": {
             "hashes": [
-                "sha256:090cb37353f5423d5e9dda903f3f8efe1ff189fc36cec09f4d5050251ce453ab",
-                "sha256:8b3944d0410e45b622a3a4f79acea45a949ec2c052956aa19225a0f5e2d53f5c"
+                "sha256:69aa91072e36ff27ceb8261718323c9ab275b3470b2260841c5b9ad5d83e8ff3",
+                "sha256:eae49ea3abc00dba38f166e92f2e8f103a75182a944eb7b79aab5b515ca0363d"
             ],
             "index": "pypi",
             "markers": "python_version >= '3.8'",
-            "version": "==1.1.1"
+            "version": "==1.2.0"
         }
     },
     "develop": {}
diff --git a/20250317/1/client.py b/20250317/1/client.py
new file mode 100644
index 0000000..06fe8a9
--- /dev/null
+++ b/20250317/1/client.py
@@ -0,0 +1,214 @@
+import cowsay
+import cmd
+from io import StringIO
+import sys
+import socket
+import shlex
+
+
+host = "localhost" if len(sys.argv) < 2 else sys.argv[1]
+port = 1337 if len(sys.argv) < 3 else int(sys.argv[2])
+
+class Mud(cmd.Cmd):
+    jgsbat = cowsay.read_dot_cow(StringIO("""
+    $the_cow = <<EOC;
+        ,_                    _,
+        ) '-._  ,_    _,  _.-' (
+        )  _.-'.|\\--//|.'-._  (
+         )'   .'\\/o\\/o\\/'.   `(
+          ) .' . \\====/ . '. (
+           )  / <<    >> \\  (
+            '-._/``  ``\\_.-'
+      jgs     __\\'--'//__
+             (((""`  `"")))
+    EOC
+    """))
+
+    weapons = {'sword': 10, 'spear': 15, 'axe': 20}
+
+    prompt = ':->'
+
+    def __init__(self, conn):
+        super().__init__()
+
+        self.conn = conn
+
+        self.x = 0
+        self.y = 0
+
+        self.field = [[0 for j in range(10)] for i in range(10)]
+
+        self.invalid_mon = ('', '', 0, -1, -1)
+        # self.default_mon = ('default', 'Hello', 100, 0, 0)
+        self.allowed_list = cowsay.list_cows()
+        self.user_list = {'jgsbat': self.jgsbat}
+
+    def get_mon_args(self, args):
+        args = shlex.split(args)
+
+        name, hello, hp, m_x, m_y  = self.invalid_mon
+        if len(args) == 0:
+            args += ['default']
+
+        if len(args) != 8:
+            if "coords" not in args:
+                args += ['coords', 0, 0]
+            if "hp" not in args:
+                args += ["hp", 100]
+            if "hello" not in args:
+                args += ["hello", "Hello"]
+
+        name = args[0]
+
+        if name not in self.allowed_list and name not in self.user_list:
+            print("Invalid arguments")
+            return self.invalid_mon
+
+        i = 1
+        while i < 8:
+            if args[i] == 'hello':
+                hello = args[i+1]
+            elif args[i] == 'hp':
+                try:
+                    hp = int(args[i+1])
+                except Exception:
+                    return self.invalid_mon
+
+                if hp <= 0:
+                    return self.invalid_mon
+            elif args[i] == 'coords':
+                try:
+                    m_x = int(args[i+1])
+                    m_y = int(args[i+2])
+                except Exception:
+                    return self.invalid_mon
+
+                if m_x < 0 or m_x > 9 or m_y < 0 or m_y > 9:
+                    print("Invalid arguments")
+                    return self.invalid_mon
+
+                i += 1
+            else:
+                print("Invalid arguments")
+                return self.invalid_mon
+            i += 2
+
+        if i < 8:
+            return self.invalid_mon
+
+        return (name, hello, hp, m_x, m_y)
+
+    '''
+    def move_mon(self, name, hello, hp, m_x, m_y):
+        if (name, hello, hp, m_x, m_y) == self.invalid_mon:
+            return
+
+        self.conn.sendall(f"addmon {name} {m_x} {m_y} {hp} {hello}\n".encode())
+        data = self.conn.recv(1024).decode().split()
+
+        if self.field[m_y][m_x] == 0:
+            print(f'Added monster to ({m_x}, {m_y}) saying {hello}')
+        else:
+            print(f'Replaced the old monster')
+
+        self.field[m_y][m_x] = {'hello':hello, 'hp': hp, 'name': name}
+    '''
+
+    def encounter(self, dx, dy):
+        self.conn.sendall(f"move {dx} {dy}\n".encode())
+        data = self.conn.recv(1024).decode().split()
+
+        x, y = data[1], data[2]
+        print(f'Moved to ({x}, {y})')
+
+        if data[0] == 'monster' and data[3] in self.allowed_list:
+            print(cowsay.cowsay(" ".join(data[4:]), cow=data[3]))
+        elif data[0] == 'monster':
+            print(cowsay.cowsay(" ".join(data[4:]), cowfile=self.user_list[data[3]]))
+
+    def do_up(self, args):
+        self.encounter(0, -1)
+
+    def do_down(self, args):
+        self.encounter(0, 1)
+
+    def do_right(self, args):
+        self.encounter(1, 0)
+
+    def do_left(self, args):
+        self.encounter(-1, 0)
+
+    def do_addmon(self, args):
+        (name, hello, hp, m_x, m_y) = self.get_mon_args(args)
+
+        if (name, hello, hp, m_x, m_y) == self.invalid_mon:
+            return
+
+        self.conn.sendall(f"addmon {name} {m_x} {m_y} {hp} {hello}\n".encode())
+        data = self.conn.recv(1024).decode().split()
+
+        if data[0] == "add":
+            print(f'Added monster to ({m_x}, {m_y}) saying {hello}')
+        else:
+            print("Replaced the old monster")
+
+    def do_attack(self, args):
+        args = shlex.split(args)
+
+        if len(args) < 1:
+            print("Type args")
+            return
+
+        name = args[0]
+        if name not in self.allowed_list and name not in self.user_list:
+            print("No such monster")
+            return
+
+        if len(args) >= 2 and args[1] != 'with':
+            print("Invalid arguments")
+            return
+
+        weapon = 'sword'
+        if len(args) >= 3:
+            weapon = args[2]
+
+        if weapon not in self.weapons:
+            print("Unknown weapon")
+            return
+
+        damage = self.weapons[weapon]
+
+        self.conn.sendall(f"attack {name} {damage}\n".encode())
+        ans, damage, hp = tuple(self.conn.recv(1024).decode().split())
+
+        if ans == 'empty':
+            print("No monster here")
+            return
+        elif ans == 'wrong_name':
+            print(f"No {name} here")
+            return
+        else:
+            print(f"Attacked {name},  damage {damage} hp")
+            if hp == '0':
+                print(f"{name} died")
+            else:
+                print(f"{name} now has {hp}")
+
+    def complete_attack(self, text, line, begidx, endidx):
+        res = shlex.split(line[:begidx], 0, 0)
+        if len(res) <= 1:
+            mon_list = list(self.user_list.keys()) + self.allowed_list
+            return [c for c in mon_list if c.startswith(text)]
+        elif res[-1] == 'with':
+            return [c for c in self.weapons if c.startswith(text)]
+
+    def do_EOF(self, args):
+        return True
+
+
+if __name__ == "__main__":
+    print("<<< Welcome to Python-MUD 0.1 >>>")
+
+    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
+        s.connect((host, port))
+        Mud(s).cmdloop()   
diff --git a/20250317/1/prog.py b/20250317/1/prog.py
index 11e8673..3e5ae51 100644
--- a/20250317/1/prog.py
+++ b/20250317/1/prog.py
@@ -30,7 +30,9 @@ class Mud(cmd.Cmd):
         self.y = 0
 
         self.field = [[0 for j in range(10)] for i in range(10)]
-        
+
+        self.default = ('', '', 0, -1, -1)
+
         self.allowed_list = cowsay.list_cows()
         self.user_list = {'jgsbat': self.jgsbat}
 
@@ -38,18 +40,17 @@ class Mud(cmd.Cmd):
     def get_mon_args(self, args):
         args = shlex.split(args)
 
-        default = ('', '', 0, -1, -1)
-        name, hello, hp, m_x, m_y  = default
+        name, hello, hp, m_x, m_y  = self.default
 
         if len(args) != 8:
             print("Invalid arguments")
-            return default
+            return self.default
 
         name = args[0]
 
         if name not in self.allowed_list and name not in self.user_list:
             print("Invalid arguments")
-            return default
+            return self.default
 
         i = 1
         while i < 8:
@@ -59,33 +60,37 @@ class Mud(cmd.Cmd):
                 try:
                     hp = int(args[i+1])
                 except Exception:
-                    return default
+                    return self.default
 
                 if hp <= 0:
-                    return default
+                    return self.default
             elif args[i] == 'coords':
                 try:
                     m_x = int(args[i+1])
                     m_y = int(args[i+2])
                 except Exception:
-                    return default
+                    return self.default
 
                 if m_x < 0 or m_x > 9 or m_y < 0 or m_y > 9:
-                    return default
+                    print("Invalid arguments")
+                    return self.default
 
                 i += 1
             else:
                 print("Invalid arguments")
-                return default
+                return self.default
             i += 2
 
         if i < 8:
-            return default
+            return self.default
 
         return (name, hello, hp, m_x, m_y)
 
 
     def move_mon(self, name, hello, hp, m_x, m_y):
+        if (name, hello, hp, m_x, m_y) == self.default:
+            return
+
         if self.field[m_y][m_x] == 0:
             print(f'Added monster to ({m_x}, {m_y}) saying {hello}')
         else:
@@ -154,27 +159,27 @@ class Mud(cmd.Cmd):
         args = shlex.split(args)
 
         if len(args) < 1:
-            print("Type monster name")
+            print("Type args")
             return
 
         if self.field[self.y][self.x] == 0:
             print("No monster here")
             return
 
-        args = shlex.split(args)
+        if args[0] != self.field[self.y][self.x]['name']:
+            print(f"No {args[0]} here")
+
         weapon = 'sword'
 
-        if len(args) >= 1 and args[0] != 'with':
+        if len(args) >= 2 and args[1] != 'with':
             print("Invalid arguments")
             return
 
-        if len(args) >= 2:
-            weapon = args[1]
+        if len(args) >= 3:
+            weapon = args[2]
 
         if weapon != 'sword' and weapon != 'spear' and weapon != 'axe':
             print("Unknown weapon")
-        if args[0] != self.field[self.y][self.x]['name']:
-            print(f"No {args[0]} here")
             return
 
         hp = int(self.field[self.y][self.x]['hp'])
@@ -188,13 +193,13 @@ class Mud(cmd.Cmd):
             damage = 20
 
 
-        if hp < 10:
+        if hp < damage:
             damage = hp
         hp -= damage
 
         print(f"Attacked {name},  damage {damage} hp")
 
-        if hp == 0:
+        if hp <= 0:
             print(f"{name} died")
             self.field[self.y][self.x] = 0
         else:
@@ -204,12 +209,12 @@ class Mud(cmd.Cmd):
 
     def complete_attack(self, text, line, begidx, endidx):
         res = shlex.split(line[:begidx], 0, 0)
-
-        if res[-1] == 'with':
+        if len(res) <= 1:
+            mon_list = list(self.user_list.keys()) + self.allowed_list
+            return [c for c in mon_list if c.startswith(text)]
+        elif res[-1] == 'with':
             return [c for c in self.weapons if c.startswith(text)]
-        mon_list = list(self.user_list.keys()) + self.allowed_list
 
-        return [c for c in mon_list if c.startswith(text)]
 
     def do_EOF(self, args):
         return True
-- 
2.49.0

